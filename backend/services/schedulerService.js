// backend/services/schedulerService.js
const cron = require('cron');
const { processSourcesDueForUpdate } = require('./rssService');
const { cleanupOldNews } = require('./newsService');

// Job pentru actualizarea automatƒÉ a feed-urilor RSS
const setupRssUpdateJob = () => {
    // RuleazƒÉ la fiecare 15 minute
    const job = new cron.CronJob('*/15 * * * *', async () => {
        console.log('üîÑ Rulare job actualizare RSS:', new Date().toISOString());
        try {
            const results = await processSourcesDueForUpdate();
            console.log(`‚úÖ Job actualizare RSS finalizat, ${results.length} surse procesate`);

            let added = 0;
            let updated = 0;
            let failed = 0;

            results.forEach(result => {
                if (result.success) {
                    added += result.added || 0;
                    updated += result.updated || 0;
                } else {
                    failed++;
                }
            });

            console.log(`üìä Statistici: ${added} adƒÉugate, ${updated} actualizate, ${failed} e»ôuate`);
        } catch (error) {
            console.error('‚ùå Eroare √Æn job-ul de actualizare RSS:', error);
        }
    });

    return job;
};

// Job pentru curƒÉ»õarea »ôtirilor vechi
const setupCleanupJob = () => {
    // RuleazƒÉ la ora 3:00 AM √Æn fiecare zi
    const job = new cron.CronJob('0 3 * * *', async () => {
        console.log('üßπ Rulare job curƒÉ»õare »ôtiri vechi:', new Date().toISOString());
        try {
            const result = await cleanupOldNews(30); // PƒÉstreazƒÉ »ôtirile din ultimele 30 zile
            console.log(`‚úÖ Job curƒÉ»õare finalizat: ${result.deleted} »ôtiri vechi »ôterse`);
        } catch (error) {
            console.error('‚ùå Eroare √Æn job-ul de curƒÉ»õare:', error);
        }
    });

    return job;
};

// Ini»õializeazƒÉ »ôi porne»ôte toate job-urile programate
const initScheduledJobs = () => {
    const rssUpdateJob = setupRssUpdateJob();
    const cleanupJob = setupCleanupJob();

    // Porne»ôte job-urile
    rssUpdateJob.start();
    cleanupJob.start();

    console.log('‚è∞ Job-uri programate ini»õializate »ôi pornite.');

    return {
        rssUpdateJob,
        cleanupJob
    };
};

module.exports = {
    initScheduledJobs
};
